<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">





  
  
  
  
  
  <title>多維矩陣轉一維矩陣</title>
</head>


<body>





<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>





<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 多維矩陣轉一維矩陣</a></h1>





<h2>說明</h2>

有的時候，為了運算方便或資料儲存的空間問題，使用一維陣列會比二維或多維陣列來得方便，例如上三角矩陣、下三角矩陣或對角矩陣，使用一維陣列會比使用二維陣列來得節省空間。<br>

<h2>解法</h2>

以二維陣列轉一維陣列為例，索引值由0開始，在由二維陣列轉一維陣列時，我們有兩種方式：「以列（Row）為主」或「以行（Column）為主」。由於
C/C++、Java等的記憶體配置方式都是以列為主，所以您可能會比較熟悉前者（Fortran的記憶體配置方式是以行為主）。<br>

<br>

以列為主的二維陣列要轉為一維陣列時，是將二維陣列由上往下一列一列讀入一維陣列，此時索引的對應公式如下所示，其中row與column是二維陣列索引，loc表示對應的一維陣列索引：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = column + row*行數</span><br>

</div>

<br>

以行為主的二維陣列要轉為一維陣列時，是將二維陣列由左往右一行一行讀入一維陣列，此時索引的對應公式如下所示：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = row + column*列數</span><br>

</div>

<br>

公式的推導您畫圖看看就知道了，如果是三維陣列，則公式如下所示，其中i（個數u1）、j（個數u2）、k（個數u3）分別表示三維陣列的三個索引：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">以列為主：loc = i*u2*u3 + j*u3 + k</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">以行為主：loc = k*u1*u2 + j*u1 + i</span><br>

</div>

<br>

更高維度的可以自行依此類推，但通常更高維度的建議使用其它資料結構（例如物件包裝）會比較具體，也不易搞錯。<br>

<br>

在C/C++中若使用到指標時，會遇到指標運算與記憶體空間位址的處理問題，此時也是用到這邊的公式，不過必須在每一個項上乘上資料型態的記憶體大小。 <br>


<br>

<h2> 實作</h2>


<ul>

  <li> C
  </li>

</ul>


<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>int main(void) { <br>    int arr1[3][4] = {{1, 2, 3, 4}, <br>                     {5, 6, 7, 8}, <br>                     {9, 10, 11, 12}}; <br>    int arr2[12] = {0}; <br>    int row, column, i; <br><br>    printf("原二維資料：\n"); <br>    for(row = 0; row &lt; 3; row++) { <br>        for(column = 0; column &lt; 4; column++) { <br>            printf("%4d", arr1[row][column]); <br>        } <br>        printf("\n"); <br>    } <br><br>    printf("\n以列為主："); <br>    for(row = 0; row &lt; 3; row++) { <br>        for(column = 0; column &lt; 4; column++) { <br>            i = column + row * 4; <br>            arr2[i] = arr1[row][column]; <br>        } <br>    } <br>    for(i = 0; i &lt; 12; i++) <br>        printf("%d ", arr2[i]); <br><br>    printf("\n以行為主："); <br>    for(row = 0; row &lt; 3; row++) { <br>        for(column = 0; column &lt; 4; column++) { <br>            i = row + column * 3; <br>            arr2[i] = arr1[row][column]; <br>        } <br>    } <br>    for(i = 0; i &lt; 12; i++) <br>        printf("%d ", arr2[i]); <br><br>    printf("\n"); <br><br>    return 0; <br>} <br></pre>


<br>


<ul>

  <li> Java
  </li>

</ul>


<pre>public class TwoDimArray {<br>    public static int[] toOneDimByRow(int[][] array) {<br>        int[] arr = new int[array.length * array[0].length];<br>        for(int row = 0; row &lt; array.length; row++) { <br>            for(int column = 0; <br>                       column &lt; array[0].length; column++) { <br>                int i = column + row * array[0].length; <br>                arr[i] = array[row][column]; <br>            } <br>        }<br>        return arr;<br>    }<br>    <br>    public static int[] toOneDimByColumn(int[][] array) {<br>        int[] arr = new int[array.length * array[0].length];<br>        for(int row = 0; row &lt; array.length; row++) { <br>            for(int column = 0; <br>                        column &lt; array[0].length; column++) { <br>                int i = i = row + column * array.length;<br>                arr[i] = array[row][column]; <br>            } <br>        }<br>        return arr;<br>    }<br>}</pre>

<br>

<br>

<br>





</body>
</html>
