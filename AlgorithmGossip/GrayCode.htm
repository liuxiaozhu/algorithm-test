<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">





  
  
  
  
  
  <title>格雷碼（Gray Code）</title>
</head>


<body>





<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>





<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 格雷碼（Gray Code）</a></h1>





<h2>說明</h2>

Gray Code是一個數列集合，每個數使用二進位來表示，假設使用n位元來表示每個數好了，任兩個數之間只有一個位元值不同，例如以下為3位元的Gray Code：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">000 001 011 010 110 111 101 100</span><br>

</div>

<br>

由定義可以知道，Gray Code的順序並不是唯一的，例如將上面的數列反過來寫，也是一組Gray Code：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">100 101 111 110 010 011 001 000</span><br>

</div>

<br>

Gray Code是由貝爾實驗室的Frank Gray在1940年代提出的，用來在使用PCM（Pusle Code Modulation）方法傳送訊號時避免出錯，並於1953年三月十七日取得美國專利。<br>

<h2>解法</h2>

由於Gray Code相鄰兩數之間只改變一個位元，所以可觀 察Gray Code從1變0或從0變1時的位置，假設有4位元的Gray Code如下：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0000 0001 0011 0010 0110 0111 0101 0100</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1100 1101 1111 1110 1010 1011 1001 1000</span><br>

</div>

<br>

觀察奇數項的變化時，我們發現無論它是第幾個Gray Code，永遠只改變最右邊的位元，如果是1就改為0，如果是0就改為1。<br>

<br>

觀察偶數項的變化時，我們發現所改變的位元，是由右邊算來第一個1的左邊位元。<br>

<br>

以上兩個變化規則是固定的，無論位元數為何；所以只要判斷位元的位置是奇數還是偶數，就可以決定要改變哪一個位元的值，為了程式撰寫方便，將陣列索引 0當作最右邊的值，而在列印結果時，是由索引數字大的開始反向列印。<br>

<br>

將2位元的Gray Code當作平面座標來看，可以構成一個四邊形，您可以發現從任一頂點出發，繞四邊形周長繞一圈，所經過的頂點座標就是一組Gray Code，所以您可以得到四組Gray Code。<br>

<br>

同樣的將3位元的Gray Code當作平面座標來看的話，可以構成一個正立方體，如果您可以從任一頂點出發，將所有的邊長走過，並不重複經過頂點的話，所經過的頂點座標順序之組合也就是一組Gray Code。 <br>


<br>

<h2> 實作</h2>


<ul>

  <li> C
  </li>

</ul>


<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define MAXBIT 20 <br>#define TRUE 1 <br>#define CHANGE_BIT(x) x = ((x) == '0' ? '1' : '0') <br>#define NEXT(x) x = (1 - (x)) <br><br>int main(void) { <br>    char digit[MAXBIT]; <br>    int i, bits, odd; <br><br>    printf("輸入位元數："); <br>    scanf("%d", &amp;bits); <br><br>    for(i = 0; i &lt; bits; i++) { <br>        digit[i] = '0'; <br>        printf("0"); <br>    } <br><br>    printf("\n"); <br><br>    odd = TRUE; <br><br>    while(1) { <br>        if(odd) <br>            CHANGE_BIT(digit[0]); <br>        else { <br>            // 計算第一個1的位置 <br>            for(i = 0; i &lt; bits &amp;&amp; digit[i] == '0'; i++) ; <br>            if(i == bits - 1) // 最後一個Gray Code <br>                 break; <br>            CHANGE_BIT(digit[i+1]); <br>        } <br>        for(i = bits - 1; i &gt;= 0; i--) <br>            printf("%c", digit[i]); <br><br>        printf("\n"); <br>        NEXT(odd); <br>    } <br>    return 0; <br>} <br></pre>



<ul>

  <li> Java
  </li>

</ul>


<pre>public class GrayCode {<br>    private char[] digit;<br>    private boolean first;<br>    private boolean odd;<br>    private int count;<br>    <br>    public GrayCode(int length) {<br>        digit = new char[length];<br>        for(int i = 0; i &lt; length; i++) {<br>            digit[i] = '0';<br>        }<br>        <br>        first = true;<br>        odd = true;<br>    }<br>    <br>    public boolean hasNext() {<br>        // 計算第一個1的位置<br>        for(count = 0; <br>            (count &lt; digit.length) &amp;&amp; (digit[count] == '0');<br>             count++) ;        <br>        return count != digit.length - 1;<br>    }<br>    <br>    public char[] next() {<br>        if(first) {<br>            first = false;<br>            return digit;<br>        }<br>        <br>        if(odd) <br>            chargeBit(digit, 0); <br>        else { <br>            //  最後一個Gray Code 嗎<br>            if(hasNext())<br>                chargeBit(digit, count+1);  <br>        }<br>        <br>        odd = ((odd == true) ? false : true);<br>        <br>        return digit;<br>    }<br>    <br>    private void chargeBit(char[] digit, int i) {<br>        digit[i] = ((digit[i] == '0') ? '1' : '0');<br>    }<br>    <br>    public static void main(String[] args) {<br>        GrayCode code = new GrayCode(4);<br>        <br>        while(code.hasNext()) {<br>            char[] digit = code.next();<br>            for(int i = digit.length - 1; i &gt;= 0; i--) <br>                System.out.print(digit[i]);<br>            System.out.println();<br>        }<br>    }<br>} </pre>

<br>

<br>

<br>





</body>
</html>
