<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">




  
  
  
  
  <title>長 PI</title>
</head>


<body>




<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>




<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 長 PI</a></h1>




<h2>說明</h2>

圓周率後的小數位數是無止境的，如何使用電腦來計算這無止境的小數是一些數學家與程式設計師所感興趣的，在這邊介紹一個公式配合 <a href="BigNumber.htm">大數運算</a>，可以計算指定位數的圓周率。<br>

<h2>解法</h2>

首先介紹J.Marchin的圓周率公式：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PI = [16/5 - 16 / (3*5<sup>3</sup>) + 16 / (5*5<sup>5</sup>) - 16 / (7*5<sup>7</sup>) + ......] -</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[4/239 - 4/(3*239<sup>3</sup>) + 4/(5*239<sup>5</sup>) - 4/(7*239<sup>7</sup>) + ......]</span><br>

</div>

<br>

可以將這個公式整理為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PI = [16/5 - 4/239] - [16/(5<sup>3</sup>) - 4/(239<sup>3</sup>)]/3+ [16/(5<sup>5</sup>) - 4/(239<sup>5</sup>)]/5 + ......</span><br>

</div>

<br>

也就是說第n項，若為奇數則為正數，為偶數則為負數，而項數表示方式為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[16/5<sup>2*n-1</sup> - 4/239<sup>2*n-1</sup>] / (2*n-1)</span><br>

</div>

<br>

如果我們要計算圓周率至10的負L次方，由於[16/5<sup>2*n-1</sup> - 4/239<sup>2*n-1</sup>]中16/5<sup>2*n-1</sup>比4/239<sup>2*n-1</sup>來的大，具有決定性，所以表示至少必須計算至第n項：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[16/5<sup>2*n-1</sup> ] / (2*n-1) = 10<sup>-L</sup></span><br>

</div>

<br>

將上面的等式取log並經過化簡，我們可以求得：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">n = L / (2log5) = L / 1.39794</span><br>

</div>

<br>

所以若要求精確度至小數後L位數，則只要求至公式的第n項，其中n等於：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">n = [L/1.39794] + 1</span><br>

</div>

<br>

在上式中[]為高斯符號，也就是取至整數（不大於L/1.39794的整數）；為了計簡方便，可以在程式中使用下面這個公式來計簡第n項：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[</span><big style="font-weight: bold; font-family: Courier New,Courier,monospace;">W</big><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"><sub>n</sub>-1/5</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">- </span><big style="font-weight: bold; font-family: Courier New,Courier,monospace;">V</big><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"><sub>n</sub>-1 / (239</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">)] / (2*n-1)</span><br>

</div>

<br>

這個公式的演算法配合大數運算函式的演算法為：
<div style="margin-left: 40px; font-weight: bold;"><span style="font-family: Courier New,Courier,monospace;">div(w, 25, w); </span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">
div(v, 239, v); </span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">
div(v, 239, v); </span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">
sub(w, v, q); </span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">
div(q, 2*k-1, q) </span><br>

</div>

&nbsp;<br>

至於大數運算的演算法，請參考之前的文章，必須注意的是在輸出時，由於是輸出陣列中的整數值，如果陣列中整數位數不滿四位，則必須補上0，在C語言中只要
使用格式指定字%04d，使得不足位數部份自動補上0再輸出，至於Java的部份，使用 NumberFormat來作格式化。<br>

<br>

您可以參考 <a href="http://crd.lbl.gov/%7Edhbailey/">這個網站</a> 有關於另一個用公式求PI的說明，它的實作在 <a href="http://crd.lbl.gov/%7Edhbailey/piqp.c">這邊</a>。<br>

<br>

<h2> 實作</h2>


<ul>

  <li> C
  </li>

</ul>


<pre>#include &lt;stdio.h&gt; <br>#define L 1000 <br>#define N L/4+1 <br><br>// L 為位數，N是array長度 <br><br>void add(int*, int*, int*); <br>void sub(int*, int*, int*); <br>void div(int*, int, int*); <br><br>int main(void) { <br>    int s[N+3] = {0}; <br>    int w[N+3] = {0}; <br>    int v[N+3] = {0}; <br>    int q[N+3] = {0}; <br>    int n = (int)(L/1.39793 + 1); <br>    int k; <br><br>    w[0] = 16*5; <br>    v[0] = 4*239; <br><br>    for(k = 1; k &lt;= n; k++) { <br>        // 套用公式 <br>        div(w, 25, w); <br>        div(v, 239, v); <br>        div(v, 239, v); <br>        sub(w, v, q); <br>        div(q, 2*k-1, q); <br><br>        if(k%2) // 奇數項 <br>            add(s, q, s); <br>        else    // 偶數項 <br>            sub(s, q, s); <br>    } <br><br>    printf("%d.", s[0]); <br>    for(k = 1; k &lt; N; k++) <br>        printf("%04d", s[k]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void add(int *a, int *b, int *c) { <br>    int i, carry = 0; <br><br>    for(i = N+1; i &gt;= 0; i--) { <br>        c[i] = a[i] + b[i] + carry; <br>        if(c[i] &lt; 10000) <br>            carry = 0; <br>        else { // 進位 <br>            c[i] = c[i] - 10000; <br>            carry = 1; <br>        } <br>    } <br>} <br><br>void sub(int *a, int *b, int *c) { <br>    int i, borrow = 0; <br><br>    for(i = N+1; i &gt;= 0; i--) { <br>        c[i] = a[i] - b[i] - borrow; <br>        if(c[i] &gt;= 0) <br>            borrow = 0; <br>        else { // 借位 <br>            c[i] = c[i] + 10000; <br>            borrow = 1; <br>        } <br>    } <br>} <br><br>void div(int *a, int b, int *c) {  // b 為除數 <br>    int i, tmp, remain = 0; <br><br>    for(i = 0; i &lt;= N+1; i++) { <br>        tmp = a[i] + remain; <br>        c[i] = tmp / b; <br>        remain = (tmp % b) * 10000; <br>    } <br>} <br></pre>


<br>


<ul>

  <li> Java
  </li>

</ul>


<pre>import java.text.NumberFormat;<br><br>public class LongPI {<br>    public static void main(String[] args) {<br>        final int L = 1000;<br>        final int N = L/4+1;<br>        int[] s = new int[N+3];<br>        int[] w = new int[N+3];<br>        int[] v = new int[N+3];<br>        int[] q = new int[N+3];<br><br>        int n = (int)(L/1.39793 + 1); <br>        <br>        w[0] = 16*5; <br>        v[0] = 4*239; <br>        <br>        for(int k = 1; k &lt;= n; k++) { <br>            // 套用公式 <br>            w = BigNumber.div(w, 25); <br>            v = BigNumber.div(v, 239); <br>            v = BigNumber.div(v, 239);<br>            q = BigNumber.sub(w, v); <br>            q = BigNumber.div(q, 2*k-1); <br><br>            if(k % 2 == 1) // 奇數項 <br>                s = BigNumber.add(s, q); <br>            else    // 偶數項 <br>                s = BigNumber.sub(s, q);<br>        } <br>        <br>        NumberFormat nf = NumberFormat.getInstance();<br>        nf.setMinimumIntegerDigits(4);<br>        <br>        System.out.print(s[0] + "."); <br>        for(int k = 1; k &lt; N; k++) <br>            System.out.print(nf.format(s[k])); <br>        <br>        System.out.println(); <br>    }<br>}</pre>

<br>

<br>

<br>




</body>
</html>
