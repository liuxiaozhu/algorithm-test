<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">




  
  
  
  
  <title>三色棋</title>
</head>


<body>




<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>




<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 三色棋</a></h1>




<h2>&nbsp;說明</h2>

三色旗的問題最早由E.W.Dijkstra所提出，他所使用的用語為Dutch Nation Flag(Dijkstra為荷蘭人)，而多數的作者則使用Three-Color Flag來稱之。<br>

<br>

假設有一條繩子，上面有紅、白、藍三種顏色的旗子，起初繩子上的旗子顏色並沒有順序，您希望將之分類，並排列為藍、白、紅的順序，要如何移動次數才會最少，注意您只能在繩子上進行這個動作，而且一次只能調換兩個旗子。<br>

<h2>解法</h2>

在一條繩子上移動，在程式中也就意味只能使用一個陣列，而不使用其它的陣列來作輔助，問題的解法很簡單，您可以自己想像一下在移動旗子，從繩子開頭進行，遇到藍色往前移，遇到白色留在中間，遇到紅色往後移，如下所示： <br>




<div style="text-align: center;"><img style="width: 504px; height: 208px;" alt="三色旗" title="三色旗" src="images/threeColorsFlags-1.jpg"><br>

</div>




只是要讓移動次數最少的話，就要有些技巧：<br>

<ol>

  <li>如果圖中W所在的位置為白色，則W+1，表示未處理的部份移至至白色群組。</li>

  <li>如果W部份為藍色，則B與W的元素對調，而B與W必須各+1，表示兩個群組都多了一個元素。</li>

  <li>如果W所在的位置是紅色，則將W與R交換，但R要減1，表示未處理的部份減1。</li>

</ol>

<br>

注意B、W、R並不是三色旗的個數，它們只是一個移動的指標；什麼時候移動結束呢？一開始時未處理的R指標會是等於旗子的總數，當R的索引數減至少於W的索引數時，表示接下來的旗子就都是紅色了，此時就可以結束移動，如下所示： <br>

<div style="text-align: center;"><img style="width: 502px; height: 236px;" alt="三色旗" title="三色旗" src="images/threeColorsFlags-2.jpg"></div>

<br>

<h2> 演算法</h2>


<br>


<pre>Procedure MOVE(Flags[]) [<br>    wFlag = 0;<br>    Flag = 0;<br>    rFlag = LENGTH(Flags[]) - 1;<br><br>    WHILE(wFlag &lt;= rFlag) [<br>        IF(Flags[wFlag] == 'W') [<br>            wFlag = wFlag + 1;<br>        ]<br>        ELSE IF(Flags[wFlag] == 'B') [<br>            SWAP(Flags[], bFlag, wFlag);<br>            bFlag = bFlag + 1;<br>            wFlag = wFlag + 1;<br>        ]<br>        ELSE [<br>            WHILE(wFlag &lt; rFlag &amp;&amp; Flags[rFlag] == 'R')<br>                rFlag = rFlag - 1;<br>            SWAP(Flags[], rFlag, wFlag);<br>            rFlag = rFlag - 1;                <br>        ]<br>    ]<br>]<br></pre>



<h2> 實作</h2>



<ul>

  <li> C
  </li>

</ul>


<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br><br>#define BLUE 'b' <br>#define WHITE 'w' <br>#define RED 'r' <br><br>#define SWAP(x, y) { char temp; \<br>                     temp = color[x]; \<br>                     color[x] = color[y]; \<br>                     color[y] = temp; }<br><br>int main() {<br>    char color[] = {'r', 'w', 'b', 'w', 'w', <br>                    'b', 'r', 'b', 'w', 'r', '\0'}; <br><br>    int wFlag = 0;<br>    int bFlag = 0;<br>    int rFlag = strlen(color) - 1;<br>    int i; <br><br>    for(i = 0; i &lt; strlen(color); i++) <br>        printf("%c ", color[i]); <br>    printf("\n"); <br><br>    while(wFlag &lt;= rFlag) {<br>        if(color[wFlag] == WHITE)<br>            wFlag++;<br>        else if(color[wFlag] == BLUE) {<br>            SWAP(bFlag, wFlag);<br>            bFlag++; wFlag++;<br>        } <br>        else { <br>            while(wFlag &lt; rFlag &amp;&amp; color[rFlag] == RED)<br>              rFlag--;<br>            SWAP(rFlag, wFlag);<br>            rFlag--;<br>        } <br>    } <br><br>    for(i = 0; i &lt; strlen(color); i++) <br>        printf("%c ", color[i]); <br>    printf("\n"); <br><br>    return 0; <br>} <br></pre>


<br>


<ul>

  <li> Java
  </li>

</ul>


<pre>import java.io.*;<br><br>public class ThreeColorsFlags {<br>    private void swap(char[] flags, int x, int y) {<br>        char temp;<br>        temp = flags[x];<br>        flags[x] = flags[y];<br>        flags[y] = temp;<br>    }<br>    <br>    public String move(char[] flags) {<br>        int wFlag = 0;<br>        int bFlag = 0;<br>        int rFlag = flags.length - 1;<br>    <br>        while(wFlag &lt;= rFlag) {<br>            if(flags[wFlag] == 'W') {<br>                wFlag++;<br>            }<br>            else if(flags[wFlag] == 'B') {<br>                swap(flags, bFlag, wFlag);<br>                bFlag++;<br>                wFlag++;<br>            }<br>            else {<br>                while(wFlag &lt; rFlag &amp;&amp; flags[rFlag] == 'R')<br>                    rFlag--;<br>                swap(flags, rFlag, wFlag);<br>                rFlag--;                <br>            }<br>        }<br>        <br>        return new String(flags);<br>    }<br>    <br>    public static void main(String[] args) <br>                                throws IOException {        <br>        BufferedReader buf; <br>        buf = new BufferedReader(<br>                    new InputStreamReader(System.in)); <br><br>        System.out.print("輸入三色棋順序（ex. RWBBWRWR）：");<br>        String flags = buf.readLine();<br>        <br>        ThreeColorsFlags threeColorsFlag = new ThreeColorsFlags();<br>        flags = threeColorsFlag.move(<br>                   flags.toUpperCase().toCharArray());<br>        <br>        System.out.println("移動順序後：" + flags);        <br>    }<br>}</pre>

<br>

<br>




</body>
</html>
