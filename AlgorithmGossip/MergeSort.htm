<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">




  
  
  
  
  <title>合併排序法</title>
</head>


<body>




<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>




<h1><a href="AlgorithmGossip.htm">Algorithm Gossip:&nbsp;合併排序法</a></h1>




<h2>說明</h2>
之前所介紹的排序法都是在同一個陣列中的排序，考慮今日有兩筆或兩筆以上的資料，它可能是不同陣列中的資料，或是不同檔案中的資料，如何為它們進行排序？<br>
<h2>解法</h2>
可以使用合併排序法，合併排序法基本是將兩筆已排序的資料合併並進行排序，如果所讀入的資料尚未排序，可以先利用其它的排序方式來處理這兩筆資料，然後再將排序好的這兩筆資料合併。<br>
<br>
有人問道，如果兩筆資料本身就無排序順序，何不將所有的資料讀入，再一次進行排序？排序的精神是儘量利用資料已排序的部份，來加快排序的效率，小筆資料的
排序較為快速，如果小筆資料排序完成之後，再合併處理時，因為兩筆資料都有排序了，所有在合併排序時會比單純讀入所有的資料再一次排序來的有效率。<br>
<br>
那麼可不可以直接使用合併排序法本身來處理整個排序的動作？而不動用到其它的排序方式？答案是肯定的，只要將所有的數字不斷的分為兩個等分，直到最後剩一個數字為止，然後再反過來不斷的合併，就如下圖所示： <br>

<div style="text-align: center;"><img style="width: 331px; height: 181px;" alt="合併排序" title="合併排序" src="images/mergeSort-1.jpg"></div>
<br>
<br>
不過基本上分割又會花去額外的時間，不如使用其它較好的排序法來排序小筆資料，再使用合併排序來的有效率。<br>
<br>
下面這個程式範例，我們使用快速排序法來處理小筆資料排序，然後再使用合併排序法處理合併的動作。 <br>
<br>
<h2> 實作</h2>

<ul>
  <li> C
  </li>
</ul>

<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX1 10 <br>#define MAX2 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>int partition(int[], int, int); <br>void quicksort(int[], int, int); <br>void mergesort(int[], int, int[], int, int[]); <br><br>int main(void) { <br>    int number1[MAX1] = {0}; <br>    int number2[MAX1] = {0}; <br>    int number3[MAX1+MAX2] = {0}; <br>    int i, num;  <br><br>    srand(time(NULL)); <br><br>    printf("排序前："); <br>    printf("\nnumber1[]："); <br>    for(i = 0; i &lt; MAX1; i++) { <br>        number1[i] = rand() % 100; <br>        printf("%d ", number1[i]); <br>    } <br><br>    printf("\nnumber2[]："); <br>    for(i = 0; i &lt; MAX2; i++) { <br>        number2[i] = rand() % 100; <br>        printf("%d ", number2[i]); <br>    } <br><br>    // 先排序兩筆資料 <br>    quicksort(number1, 0, MAX1-1); <br>    quicksort(number2, 0, MAX2-1); <br><br>    printf("\n排序後："); <br>    printf("\nnumber1[]："); <br>    for(i = 0; i &lt; MAX1; i++) <br>        printf("%d ", number1[i]); <br>    printf("\nnumber2[]："); <br>    for(i = 0; i &lt; MAX2; i++) <br>        printf("%d ", number2[i]); <br><br>    // 合併排序 <br>    mergesort(number1, MAX1, number2, MAX2, number3); <br><br>    printf("\n合併後："); <br>    for(i = 0; i &lt; MAX1+MAX2; i++) <br>        printf("%d ", number3[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int partition(int number[], int left, int right) { <br>    int i, j, s; <br><br>    s = number[right]; <br>    i = left - 1; <br><br>    for(j = left; j &lt; right; j++) { <br>        if(number[j] &lt;= s) { <br>            i++; <br>            SWAP(number[i], number[j]); <br>        } <br>    } <br><br>    SWAP(number[i+1], number[right]); <br>    return i+1; <br>} <br><br>void quicksort(int number[], int left, int right) { <br>    int q; <br><br>    if(left &lt; right) { <br>        q = partition(number, left, right); <br>        quicksort(number, left, q-1); <br>        quicksort(number, q+1, right); <br>    } <br>} <br><br>void mergesort(int number1[], int M, int number2[], <br>                int N, int number3[]) { <br>    int i = 0, j = 0, k = 0; <br><br>    while(i &lt; M &amp;&amp; j &lt; N) { <br>        if(number1[i] &lt;= number2[j]) <br>            number3[k++] = number1[i++]; <br>        else <br>            number3[k++] = number2[j++]; <br>    } <br><br>    while(i &lt; M) <br>        number3[k++] = number1[i++]; <br>    while(j &lt; N) <br>        number3[k++] = number2[j++]; <br>} <br></pre>

<br>

<ul>
  <li> Java
  </li>
</ul>

<pre>public class MergeSort {<br>    public static int[] sort(int[] number1, <br>                             int[] number2) {<br>        int[] number3 = <br>                   new int[number1.length + number2.length];<br>        <br>        int i = 0, j = 0, k = 0; <br><br>        while(i &lt; number1.length &amp;&amp; j &lt; number2.length) { <br>            if(number1[i] &lt;= number2[j]) <br>                number3[k++] = number1[i++]; <br>            else <br>                number3[k++] = number2[j++]; <br>        } <br><br>        while(i &lt; number1.length) <br>            number3[k++] = number1[i++]; <br>        while(j &lt; number2.length) <br>            number3[k++] = number2[j++];<br>        <br>        return number3;<br>    }<br>}</pre>
<br>
<br>




</body>
</html>
