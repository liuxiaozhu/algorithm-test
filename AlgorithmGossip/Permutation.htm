<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">




  
  
  
  
  <title>排列組合</title>
</head>


<body>




<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>




<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 排列組合</a></h1>




<h2>說明</h2>
將一組數字、字母或符號進行排列，以得到不同的組合順序，例如1 2 3這三個數的排列組合有：1 2 3、1 3 2、2 1 3、2 3 1、3 1 2、3 2 1。<br>
<h2>解法</h2>
可以使用遞迴將問題切割為較小的單元進行排列組合，例如1 2 3 4的排列可以分為1 [2 3 4]、2 [1 3 4]、3 [1 2 4]、4
[1 2 3]進行排列，這邊利用旋轉法，先將旋轉間隔設為0，將最右邊的數字旋轉至最左邊，並逐步增加旋轉的間隔，例如：<br>
<div style="margin-left: 40px;"><span style="font-weight: bold;">1 2 3 4 -&gt; 旋轉1 -&gt; 繼續將右邊2 3 4進行遞迴處理</span><br style="font-weight: bold;">
<span style="font-weight: bold;">2 1 3 4 -&gt; 旋轉1 2 變為 2 1-&gt; 繼續將右邊1 3 4進行遞迴處理</span><br style="font-weight: bold;">
<span style="font-weight: bold;">3 1 2 4 -&gt; 旋轉1 2 3變為 3 1 2 -&gt; 繼續將右邊1 2 4進行遞迴處理</span><br style="font-weight: bold;">
<span style="font-weight: bold;">4 1 2 3 -&gt; 旋轉1 2 3 4變為4 1 2 3 -&gt; 繼續將右邊1 2 3進行遞迴處理 </span><br>
</div>

<br>
<h2> 實作</h2>

<ul>
  <li> C
  </li>
</ul>

<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define N 4 <br><br>void perm(int*, int); <br><br>int main(void) { <br>    int num[N+1], i; <br><br>    for(i = 1; i &lt;= N; i++) <br>        num[i] = i; <br><br>    perm(num, 1); <br><br>    return 0; <br>} <br><br>void perm(int* num, int i) { <br>    int j, k, tmp; <br><br>    if(i &lt; N) { <br>        for(j = i; j &lt;= N; j++) { <br>            tmp = num[j]; <br>            // 旋轉該區段最右邊數字至最左邊 <br>            for(k = j; k &gt; i; k--) <br>                num[k] = num[k-1]; <br>            num[i] = tmp; <br><br>            perm(num, i+1); <br><br>            // 還原 <br>            for(k = i; k &lt; j; k++) <br>                num[k] = num[k+1]; <br>            num[j] = tmp; <br>        } <br>    } <br>    else {  // 顯示此次排列 <br>        for(j = 1; j &lt;= N; j++) <br>            printf("%d ", num[j]); <br>        printf("\n"); <br>    } <br>}  <br></pre>

<br>

<ul>
  <li> Java
  </li>
</ul>

<pre>public class Permutation {<br>    public static void perm(int[] num, int i) {<br><br>        if(i &lt; num.length - 1) { <br>            for(int j = i; j &lt;= num.length - 1; j++) { <br>                int tmp = num[j]; <br>                // 旋轉該區段最右邊數字至最左邊 <br>                for(int k = j; k &gt; i; k--) <br>                    num[k] = num[k-1]; <br>                num[i] = tmp; <br><br>                perm(num, i+1); <br><br>                // 還原 <br>                for(int k = i; k &lt; j; k++) <br>                    num[k] = num[k+1]; <br>                num[j] = tmp; <br>            } <br>        } <br>        else {  // 顯示此次排列 <br>            for(int j = 1; j &lt;= num.length - 1; j++) <br>                System.out.print(num[j] + " "); <br>            System.out.println(); <br>        } <br>    }<br><br>    public static void main(String[] args) {<br>        int[] num = new int[4+1]; <br><br>        for(int i = 1; i &lt;= num.length - 1; i++) <br>            num[i] = i; <br><br>        perm(num, 1); <br>    }<br>}<br></pre>
<br>




</body>
</html>
