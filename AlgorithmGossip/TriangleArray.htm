<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>





  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">





  
  
  
  
  
  <title>上三角、下三角、對稱矩陣</title>
</head>


<body>





<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>





<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 上三角、下三角、對稱矩陣</a></h1>





<h2>說明</h2>

上三角矩陣是矩陣在對角線以下的元素均為0，即A<sub>ij</sub> = 0，i &gt; j，例如：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; &nbsp; 4&nbsp;&nbsp;&nbsp; 5 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp;&nbsp; 6&nbsp;&nbsp; 7&nbsp;&nbsp; &nbsp; 8&nbsp;&nbsp;&nbsp; 9 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp;&nbsp; 0&nbsp;&nbsp; 10 &nbsp;&nbsp; 11&nbsp; &nbsp;12 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp;&nbsp; 0&nbsp;&nbsp; 0&nbsp;&nbsp; &nbsp; 13&nbsp; &nbsp;14 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">0&nbsp;&nbsp; 0&nbsp;&nbsp; 0&nbsp; &nbsp;&nbsp; 0&nbsp; &nbsp; 15</span><br>

</div>

<br>

下三角矩陣是矩陣在對角線以上的元素均為0，即A<sub>ij </sub>= 0，i &lt; j，例如：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;1&nbsp;&nbsp; 0&nbsp;&nbsp; 0&nbsp;&nbsp; 0&nbsp;&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;2&nbsp;&nbsp; 6&nbsp;&nbsp; 0&nbsp;&nbsp; 0&nbsp;&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;3&nbsp;&nbsp; 7&nbsp;&nbsp; 10&nbsp; 0&nbsp;&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;4&nbsp;&nbsp; 8&nbsp;&nbsp; 11&nbsp; 13&nbsp; 0 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;5&nbsp;&nbsp; 9&nbsp;&nbsp; 12&nbsp; 14&nbsp; 15 </span><br>

</div>

<br>

對稱矩陣是矩陣元素對稱於對角線，例如：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;2&nbsp;&nbsp; 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;3&nbsp;&nbsp; 7&nbsp;&nbsp; 10&nbsp; 11&nbsp; 12 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;4&nbsp;&nbsp; 8&nbsp;&nbsp; 11&nbsp; 13&nbsp; 14 </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">

<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;5&nbsp;&nbsp; 9&nbsp;&nbsp; 12&nbsp; 14&nbsp; 15 </span><br>

</div>

<br>

上三角或下三角矩陣也有大部份的元素不儲存值（為0），我們可以將它們使用一維陣列來儲存以節省儲存空間，而對稱矩陣因為對稱於對角線，所以可以視為上三角或下三角矩陣來儲存。<br>

<h2>解法</h2>

假設矩陣為nxn，為了計算方便，我們讓陣列索引由1開始，上三角矩陣化為一維陣列，若以列為主，其公式為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = n*(i-1) - i*(i-1)/2 + j</span><br>

</div>

<br>

化為以行為主，其公式為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = j*(j-1)/2 + i</span><br>

</div>

<br>

下三角矩陣化為一維陣列，若以列為主，其公式為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = i*(i-1)/2 + j</span><br>

</div>

<br>

若以行為主，其公式為：<br>

<div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">loc = n*(j-1) - j*(j-1)/2 + i</span><br>

</div>

<br>

公式的導證其實是由等差級數公式得到，您可以自行繪圖並看看就可以導證出來，對於C/C++或Java等索引由0開始的語言來說，只要將i與j各加1，求得loc之後減1即可套用以上的公式。 <br>


<br>

<h2> 實作</h2>


<ul>

  <li> C
  </li>

</ul>


<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define N 5 <br><br>int main(void) { <br>    int arr1[N][N] = { <br>        {1, 2, 3,  4,   5}, <br>        {0, 6, 7,  8,   9}, <br>        {0, 0, 10, 11, 12}, <br>        {0, 0, 0,  13, 14}, <br>        {0, 0, 0,  0,  15}}; <br><br>    int arr2[N*(1+N)/2] = {0}; <br><br>    int i, j, loc = 0; <br><br>    printf("原二維資料：\n"); <br>    for(i = 0; i &lt; N; i++) { <br>        for(j = 0; j &lt; N; j++) { <br>            printf("%4d", arr1[i][j]); <br>        } <br>        printf("\n"); <br>    } <br><br>    printf("\n以列為主："); <br>    for(i = 0; i &lt; N; i++) { <br>        for(j = 0; j &lt; N; j++) { <br>            if(arr1[i][j] != 0) <br>                arr2[loc++] = arr1[i][j]; <br>        } <br>    } <br>    for(i = 0; i &lt; N*(1+N)/2; i++) <br>        printf("%d ", arr2[i]); <br><br>    printf("\n輸入索引(i, j)："); <br>    scanf("%d, %d", &amp;i, &amp;j); <br>    loc = N*i - i*(i+1)/2 + j; <br>    printf("(%d, %d) = %d", i, j, arr2[loc]); <br><br>    printf("\n"); <br><br>    return 0; <br>} <br></pre>


<br>


<ul>

  <li> Java
  </li>

</ul>


<pre>public class TriangleArray {<br>    private int[] arr;<br>    private int length;<br>    <br>    public TriangleArray(int[][] array) {<br>        length = array.length;<br>        arr = new int[length*(1+length)/2];<br>        <br>        int loc = 0;<br>        for(int i = 0; i &lt; length; i++) { <br>            for(int j = 0; j &lt; length; j++) { <br>                if(array[i][j] != 0) <br>                    arr[loc++] = array[i][j]; <br>            } <br>        }<br>    }<br>    <br>    public int getValue(int i, int j) {<br>        int loc = length*i - i*(i+1)/2 + j;<br>        return arr[loc];<br>    }<br><br>    public static void main(String[] args) {<br>        int[][] array = { <br>                {1, 2, 3,  4,   5}, <br>                {0, 6, 7,  8,   9}, <br>                {0, 0, 10, 11, 12}, <br>                {0, 0, 0,  13, 14}, <br>                {0, 0, 0,  0,  15}};<br>        <br>        TriangleArray triangleArray =<br>                                   new TriangleArray(array);<br>        <br>        System.out.print(triangleArray.getValue(2, 2));<br>    }<br>}</pre>

<br>

<br>





</body>
</html>
