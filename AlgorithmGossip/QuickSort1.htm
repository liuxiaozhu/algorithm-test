<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">




  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">




  
  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">




  
  
  
  
  <title>快速排序法（一）</title>
</head>


<body>




<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>




<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 快速排序法（一）</a></h1>




<h2>說明</h2>
快速排序法（quick sort）是目前所公認最快的排序方法之一（視解題的對象而定），雖然快速排序法在最差狀況下可以達O(n<sup>2</sup>)，但是在多數的情況下，快速排序法的效率表現是相當不錯的。<br>
<br>
快速排序法的基本精神是在數列中找出適當的軸心，然後將數列一分為二，分別對左邊與右邊數列進行排序，而影響快速排序法效率的正是軸心的選擇。<br>
<br>
這邊所介紹的第一個快速排序法版本，是在多數的教科書上所提及的版本，因為它最容易理解，也最符合軸心分割與左右進行排序的概念，適合對初學者進行講解。<br>
<h2>解法</h2>
這邊所介紹的快速演算如下：<br>
<ol>
  <li>將最左邊的數設定為軸，並記錄其值為 s</li>
</ol>
<br>
&#24315;圈處理：<br>
<ol>
  <li>令索引 i 從數列左方往右方找，直到找到大於 s 的數</li>
  <li>令索引 j 從數列左右方往左方找，直到找到小於 s 的數</li>
  <li>如果 i &gt;= j，則離開迴圈</li>
  <li>如果 i &lt; j，則交換索引i與j兩處的值</li>
  <li>將左側的軸與 j 進行交換</li>
  <li>對軸左邊進行遞迴</li>
  <li>對軸右邊進行遞迴</li>
</ol>
<br>
透過以下演算法，則軸左邊的值都會小於s，軸右邊的值都會大於s，如此再對軸左右兩邊進行遞迴，就可以對完成排序的目的，例如下面的實例，*表示要交換的數，[]表示軸：<br>
<ul>
  <li>[41]　24　76*　11　45　64　21　69　19　36*</li>
  <li>[41]　24　36　11　45*　64　21　69　19*　76</li>
  <li>[41]　24　36　11　19　64*　21*　69　45　76</li>
  <li>[41]　24　36　11　19　21　64　69　45　76</li>
  <li>21　24　36　11　19　[41]　64　69　45　76</li>
</ul>
<br>
在上面的例子中，41左邊的值都比它小，而右邊的值都比它大，如此左右再進行遞迴至排序完成。 <br>

<h2> 實作</h2>

<ul>
  <li> C
  </li>
</ul>

<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quicksort(int[], int, int); <br><br>int main(void) { <br>    int number[MAX] = {0}; <br>    int i, num;  <br><br>    srand(time(NULL)); <br><br>    printf("排序前："); <br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quicksort(number, 0, MAX-1); <br><br>    printf("\n排序後："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void quicksort(int number[], int left, int right) { <br>    int i, j, s; <br><br>    if(left &lt; right) { <br>        s = number[left]; <br>        i = left; <br>        j = right + 1; <br><br>        while(1) { <br>            // 向右找<br>            while(i + 1 &lt; number.length &amp;&amp; number[++i] &lt; s) ;  <br>            // 向左找  <br>            while(j -1 &gt; -1 &amp;&amp; number[--j] &gt; s) ;  <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        number[left] = number[j]; <br>        number[j] = s; <br><br>        quicksort(number, left, j-1);   // 對左邊進行遞迴 <br>        quicksort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></pre>

<br>

<ul>
  <li> Java
  </li>
</ul>

<pre>public class QuickSort {<br>    public static void sort(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, <br>                             int left, int right) {<br>        if(left &lt; right) { <br>            int s = number[left]; <br>            int i = left; <br>            int j = right + 1; <br><br>            while(true) { <br>                // 向右找 <br>                while(i + 1 &lt; number.length &amp;&amp; number[++i] &lt; s) ;  <br>                // 向左找 <br>                while(j -1 &gt; -1 &amp;&amp; number[--j] &gt; s) ;  <br>                if(i &gt;= j) <br>                    break; <br>                swap(number, i, j); <br>            } <br><br>            number[left] = number[j]; <br>            number[j] = s; <br><br>            sort(number, left, j-1);   // 對左邊進行遞迴 <br>            sort(number, j+1, right);  // 對右邊進行遞迴 <br>        }<br>    }<br>    <br>    private static void swap(int[] number, int i, int j) {<br>        int t; <br>        t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}</pre>
<br>
<br>
<br>




</body>
</html>
