<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>



  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">



  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">



  
  
  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">



  
  
  
  <title>字串核對</title>
</head>


<body>



<h3><a href="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>



<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 字串核對</a></h1>



<h2>&nbsp;說明</h2>
今日的一些高階程式語言對於字串的處理支援越來越強大（例如Java、Perl等），不過字串搜尋本身仍是個值得探討的課題，在這邊以Boyer- Moore法來說明如何進行字串說明，這個方法快且原理簡潔易懂。<br>
<h2>解法</h2>
字串搜尋本身不難，使用暴力法也可以求解，但如何快速搜尋字串就不簡單了，傳統的字串搜尋是從關鍵字與字串的開頭開始比對，例如 <a href="http://www.ics.uci.edu/%7Eeppstein/161/960227.html">Knuth-Morris-Pratt 演算法</a> 字串搜尋，這個方法也不錯，不過要花時間在公式計算上；Boyer-Moore字串核對改由關鍵字的後面開始核對字串，並製作前進表，如果比對不符合則依前進表中的值前進至下一個核對處，假設是p好了，然後比對字串中p-n+1至p的值是否與關鍵字相同。 <br>
<div style="text-align: center;"><img style="width: 271px; height: 87px;" alt="字串核對" title="字串核對" src="images/matchString-1.jpg"><br>
<br>
<div style="text-align: left;">那麼前進表該如何前進，舉個實際的例子，如果要在字串中搜尋JUST這個字串，則可能遇到的幾個情況如下所示：<br>
<div style="text-align: center;"><img style="width: 364px; height: 367px;" alt="字串核對" title="字串核對" src="images/matchString-2.jpg"><br>
<br>
<br>
</div>

依照這個例子，可以決定出我們的前進值表如下： <br>
<table style="text-align: left; height: 102px; width: 313px;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td>其它</td>
      <td>J</td>
      <td>U</td>
      <td>S</td>
      <td>T</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3</td>
      <td>2</td>
      <td>1</td>
      <td>4（match?）</td>
    </tr>
  </tbody>
</table>
<br>

如果關鍵字中有重複出現的字元，則前進值就會有兩個以上的值，此時則取前進值較小的值，如此就不會跳過可能的位置，例如texture這個關鍵字，t的前
進值應該取後面的3而不是取前面的7。<br>
<h2> 實作</h2>

<ul>
  <li> C
  </li>
</ul>

<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br><br>void table(char*);  // 建立前進表 <br>int search(int, char*, char*); // 搜尋關鍵字 <br>void substring(char*, char*, int, int); // 取出子字串 <br><br>int skip[256]; <br><br>int main(void) { <br>    char str_input[80]; <br>    char str_key[80]; <br>    char tmp[80] = {'\0'}; <br>    int m, n, p; <br><br>    printf("請輸入字串："); <br>    gets(str_input); <br>    printf("請輸入搜尋關鍵字："); <br>    gets(str_key); <br><br>    m = strlen(str_input); // 計算字串長度 <br>    n = strlen(str_key); <br>    table(str_key);  <br>    p = search(n-1, str_input, str_key); <br><br>    while(p != -1) { <br>        substring(str_input, tmp, p, m); <br>        printf("%s\n", tmp); <br>        p = search(p+n+1, str_input, str_key); <br>    } <br><br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void table(char *key) { <br>    int k, n; <br><br>    n = strlen(key); <br><br>    for(k = 0; k &lt;= 255; k++) <br>        skip[k] = n; <br>    for(k = 0; k &lt; n - 1; k++) <br>        skip[key[k]] = n - k - 1; <br>} <br><br>int search(int p, char* input, char* key) { <br>    int i, m, n; <br>    char tmp[80] = {'\0'}; <br><br>    m = strlen(input); <br>    n = strlen(key); <br><br>    while(p &lt; m) { <br>        substring(input, tmp, p-n+1, p); <br>        <br>        if(!strcmp(tmp, key))  // 比較兩字串是否相同 <br>           return p-n+1; <br>        p += skip[input[p]]; <br>    } <br><br>    return -1; <br>} <br><br>void substring(char *text, char* tmp, int s, int e) { <br>    int i, j; <br><br>    for(i = s, j = 0; i &lt;= e; i++, j++) <br>        tmp[j] = text[i]; <br><br>    tmp[j] = '\0'; <br>} <br></pre>

<br>

<ul>
  <li> Java
  </li>
</ul>

<pre>import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br><br>public class StringMatch {<br>    private int[] skip;<br>    private int p;<br>    private String str;<br>    private String key;<br>    <br>    public StringMatch(String key) {<br>        skip = new int[256];<br>        this.key = key;<br>        <br>        for(int k = 0; k &lt;= 255; k++) <br>            skip[k] = key.length(); <br>        for(int k = 0; k &lt; key.length() - 1; k++) <br>            skip[key.charAt(k)] = key.length() - k - 1; <br>    }<br>    <br>    public void search(String str) {<br>        this.str = str;<br>        p = search(key.length()-1, str, key);<br>    }<br>    <br>    private int search(int p, String input, String key) {   <br>        while(p &lt; input.length()) { <br>            String tmp = input.substring(<br>                                p-key.length()+1, p+1); <br><br>            if(tmp.equals(key))  // 比較兩字串是否相同 <br>               return p-key.length()+1; <br>            p += skip[input.charAt(p)]; <br>        } <br><br>        return -1; <br>    }<br>    <br>    public boolean hasNext() {<br>        return (p != -1);<br>    }<br>    <br>    public String next() {<br>        String tmp = str.substring(p);<br>        p = search(p+key.length()+1, str, key);<br>        return tmp;<br>    }<br>    <br>    public static void main(String[] args) <br>                                      throws IOException {<br>        BufferedReader bufReader = <br>            new BufferedReader(<br>                    new InputStreamReader(System.in));<br>        <br>        System.out.print("請輸入字串：");<br>        String str = bufReader.readLine();<br>        System.out.print("請輸入搜尋關鍵字："); <br>        String key = bufReader.readLine();<br>        <br>        StringMatch strMatch = new StringMatch(key);<br>        strMatch.search(str);<br><br>        while(strMatch.hasNext()) { <br>            System.out.println(strMatch.next()); <br>        } <br>    }<br>} </pre>
<br>
<br>
</div>
</div>



</body>
</html>
